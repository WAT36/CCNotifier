name: ECR Deploy
on:
  push:
    branches:
      - main

env:
  S3_BUCKET: ccnotifier-bi-page-buckets

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main # リポジトリをチェックアウト

      # AWS認証
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Prepare .env file
      #   run: |
      #     aws ssm get-parameter --name /github/*** --output json | jq -r .Parameter.Value > .env
      #     cut -d= -f2 .env  | xargs -I arg echo ::add-mask::arg
      #     cat .env >> "$GITHUB_ENV"

      # ECR ログイン
      - uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      # Docker イメージを build・push する
      - name: build and push docker image to ecr
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: "ccnotifier"
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}

      # Lambda更新
      - name: update lambda function
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: "ccnotifier"
        run: aws lambda update-function-code --function-name CCNotifierImageFunctions --image-uri ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest

      # Frontend deploy
      - name: Install deps
        run: cd frontend && npm ci

      - name: Build & Export
        run: |
          cd frontend
          npm run build   # out/ 生成

      # HTML はキャッシュさせない
      - name: Upload HTML (no-cache)
        run: |
          aws s3 cp ./frontend/out s3://$S3_BUCKET \
            --recursive \
            --exclude "*" \
            --include "*.html" \
            --content-type "text/html" \
            --cache-control "no-cache, no-store, must-revalidate"

      # 残りアセットは長期キャッシュ
      - name: Upload assets (immutable)
        run: |
          aws s3 cp ./frontend/out s3://$S3_BUCKET \
            --recursive \
            --exclude "*.html" \
            --cache-control "public, max-age=31536000, immutable"

      # 完全同期したい場合（不要なら削除可）
      - name: Sync (delete removed)
        run: |
          aws s3 sync ./frontend/out s3://$S3_BUCKET --delete
